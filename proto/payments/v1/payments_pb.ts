// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file payments/v1/payments.proto (package payments.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../google/api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file payments/v1/payments.proto.
 */
export const file_payments_v1_payments: GenFile = /*@__PURE__*/
  fileDesc("ChpwYXltZW50cy92MS9wYXltZW50cy5wcm90bxILcGF5bWVudHMudjEiMQoORGVwb3NpdFJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCRIOCgZhbW91bnQYAiABKAEiSgoPRGVwb3NpdFJlc3BvbnNlEhYKDnRyYW5zYWN0aW9uX2lkGAEgASgJEg4KBnN0YXR1cxgCIAEoCRIPCgdtZXNzYWdlGAMgASgJIjIKD1dpdGhkcmF3UmVxdWVzdBIPCgd1c2VyX2lkGAEgASgJEg4KBmFtb3VudBgCIAEoASJLChBXaXRoZHJhd1Jlc3BvbnNlEhYKDnRyYW5zYWN0aW9uX2lkGAEgASgJEg4KBnN0YXR1cxgCIAEoCRIPCgdtZXNzYWdlGAMgASgJIiwKGVRyYW5zYWN0aW9uSGlzdG9yeVJlcXVlc3QSDwoHdXNlcl9pZBgBIAEoCSJ3CgtUcmFuc2FjdGlvbhIWCg50cmFuc2FjdGlvbl9pZBgBIAEoCRIPCgd1c2VyX2lkGAIgASgJEg4KBmFtb3VudBgDIAEoARIMCgR0eXBlGAQgASgJEg4KBnN0YXR1cxgFIAEoCRIRCgl0aW1lc3RhbXAYBiABKAkiSwoZVXBsb2FkVHJhbnNhY3Rpb25zUmVxdWVzdBIuCgx0cmFuc2FjdGlvbnMYASADKAsyGC5wYXltZW50cy52MS5UcmFuc2FjdGlvbiJaChpVcGxvYWRUcmFuc2FjdGlvbnNSZXNwb25zZRIVCg1zdWNjZXNzX2NvdW50GAEgASgFEhUKDWZhaWx1cmVfY291bnQYAiABKAUSDgoGZXJyb3JzGAMgAygJMpQFCg5QYXltZW50U2VydmljZRJlCgdEZXBvc2l0EhsucGF5bWVudHMudjEuRGVwb3NpdFJlcXVlc3QaHC5wYXltZW50cy52MS5EZXBvc2l0UmVzcG9uc2UiH4LT5JMCGToBKiIUL3YxL3BheW1lbnRzL2RlcG9zaXQSaQoIV2l0aGRyYXcSHC5wYXltZW50cy52MS5XaXRoZHJhd1JlcXVlc3QaHS5wYXltZW50cy52MS5XaXRoZHJhd1Jlc3BvbnNlIiCC0+STAho6ASoiFS92MS9wYXltZW50cy93aXRoZHJhdxKPAQoVR2V0VHJhbnNhY3Rpb25IaXN0b3J5EiYucGF5bWVudHMudjEuVHJhbnNhY3Rpb25IaXN0b3J5UmVxdWVzdBoYLnBheW1lbnRzLnYxLlRyYW5zYWN0aW9uIjKC0+STAiwSKi92MS9wYXltZW50cy90cmFuc2FjdGlvbi1oaXN0b3J5L3t1c2VyX2lkfTABEp8BChJVcGxvYWRUcmFuc2FjdGlvbnMSJi5wYXltZW50cy52MS5VcGxvYWRUcmFuc2FjdGlvbnNSZXF1ZXN0GicucGF5bWVudHMudjEuVXBsb2FkVHJhbnNhY3Rpb25zUmVzcG9uc2UiNoLT5JMCMDoMdHJhbnNhY3Rpb25zIiAvdjEvcGF5bWVudHMvdXBsb2FkLXRyYW5zYWN0aW9ucygBEnwKE1JlYWxUaW1lVHJhbnNhY3Rpb24SGC5wYXltZW50cy52MS5UcmFuc2FjdGlvbhoYLnBheW1lbnRzLnYxLlRyYW5zYWN0aW9uIi2C0+STAic6ASoiIi92MS9wYXltZW50cy9yZWFsLXRpbWUtdHJhbnNhY3Rpb24oATABQjhaNmdpdGh1Yi5jb20vamF2aWVydGVsaW96L2dycGMtc2VydmljZS10ZW1wbGF0ZS9wYXltZW50c2IGcHJvdG8z", [file_google_api_annotations]);

/**
 * Messages for deposit
 *
 * @generated from message payments.v1.DepositRequest
 */
export type DepositRequest = Message<"payments.v1.DepositRequest"> & {
  /**
   * The ID of the user making the deposit.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * The amount to be deposited.
   *
   * @generated from field: double amount = 2;
   */
  amount: number;
};

/**
 * Describes the message payments.v1.DepositRequest.
 * Use `create(DepositRequestSchema)` to create a new message.
 */
export const DepositRequestSchema: GenMessage<DepositRequest> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 0);

/**
 * @generated from message payments.v1.DepositResponse
 */
export type DepositResponse = Message<"payments.v1.DepositResponse"> & {
  /**
   * The ID of the transaction.
   *
   * @generated from field: string transaction_id = 1;
   */
  transactionId: string;

  /**
   * The status of the deposit (e.g., "success", "failure").
   *
   * @generated from field: string status = 2;
   */
  status: string;

  /**
   * Additional information about the transaction.
   *
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message payments.v1.DepositResponse.
 * Use `create(DepositResponseSchema)` to create a new message.
 */
export const DepositResponseSchema: GenMessage<DepositResponse> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 1);

/**
 * Messages for withdrawal
 *
 * @generated from message payments.v1.WithdrawRequest
 */
export type WithdrawRequest = Message<"payments.v1.WithdrawRequest"> & {
  /**
   * The ID of the user making the withdrawal.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;

  /**
   * The amount to be withdrawn.
   *
   * @generated from field: double amount = 2;
   */
  amount: number;
};

/**
 * Describes the message payments.v1.WithdrawRequest.
 * Use `create(WithdrawRequestSchema)` to create a new message.
 */
export const WithdrawRequestSchema: GenMessage<WithdrawRequest> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 2);

/**
 * @generated from message payments.v1.WithdrawResponse
 */
export type WithdrawResponse = Message<"payments.v1.WithdrawResponse"> & {
  /**
   * The ID of the transaction.
   *
   * @generated from field: string transaction_id = 1;
   */
  transactionId: string;

  /**
   * The status of the withdrawal (e.g., "success", "failure").
   *
   * @generated from field: string status = 2;
   */
  status: string;

  /**
   * Additional information about the transaction.
   *
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message payments.v1.WithdrawResponse.
 * Use `create(WithdrawResponseSchema)` to create a new message.
 */
export const WithdrawResponseSchema: GenMessage<WithdrawResponse> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 3);

/**
 * Messages for transaction history
 *
 * @generated from message payments.v1.TransactionHistoryRequest
 */
export type TransactionHistoryRequest = Message<"payments.v1.TransactionHistoryRequest"> & {
  /**
   * The ID of the user whose transaction history is being retrieved.
   *
   * @generated from field: string user_id = 1;
   */
  userId: string;
};

/**
 * Describes the message payments.v1.TransactionHistoryRequest.
 * Use `create(TransactionHistoryRequestSchema)` to create a new message.
 */
export const TransactionHistoryRequestSchema: GenMessage<TransactionHistoryRequest> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 4);

/**
 * @generated from message payments.v1.Transaction
 */
export type Transaction = Message<"payments.v1.Transaction"> & {
  /**
   * The ID of the transaction.
   *
   * @generated from field: string transaction_id = 1;
   */
  transactionId: string;

  /**
   * The ID of the user associated with the transaction.
   *
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * The amount involved in the transaction.
   *
   * @generated from field: double amount = 3;
   */
  amount: number;

  /**
   * The type of transaction (e.g., "deposit", "withdrawal").
   *
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * The status of the transaction.
   *
   * @generated from field: string status = 5;
   */
  status: string;

  /**
   * The timestamp of when the transaction occurred.
   *
   * @generated from field: string timestamp = 6;
   */
  timestamp: string;
};

/**
 * Describes the message payments.v1.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
export const TransactionSchema: GenMessage<Transaction> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 5);

/**
 * Message for uploading transactions
 *
 * @generated from message payments.v1.UploadTransactionsRequest
 */
export type UploadTransactionsRequest = Message<"payments.v1.UploadTransactionsRequest"> & {
  /**
   * A list of transactions to be uploaded.
   *
   * @generated from field: repeated payments.v1.Transaction transactions = 1;
   */
  transactions: Transaction[];
};

/**
 * Describes the message payments.v1.UploadTransactionsRequest.
 * Use `create(UploadTransactionsRequestSchema)` to create a new message.
 */
export const UploadTransactionsRequestSchema: GenMessage<UploadTransactionsRequest> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 6);

/**
 * @generated from message payments.v1.UploadTransactionsResponse
 */
export type UploadTransactionsResponse = Message<"payments.v1.UploadTransactionsResponse"> & {
  /**
   * The number of transactions successfully processed.
   *
   * @generated from field: int32 success_count = 1;
   */
  successCount: number;

  /**
   * The number of transactions that failed to process.
   *
   * @generated from field: int32 failure_count = 2;
   */
  failureCount: number;

  /**
   * A list of error messages for the failed transactions.
   *
   * @generated from field: repeated string errors = 3;
   */
  errors: string[];
};

/**
 * Describes the message payments.v1.UploadTransactionsResponse.
 * Use `create(UploadTransactionsResponseSchema)` to create a new message.
 */
export const UploadTransactionsResponseSchema: GenMessage<UploadTransactionsResponse> = /*@__PURE__*/
  messageDesc(file_payments_v1_payments, 7);

/**
 * PaymentService provides a set of APIs for processing payments and transactions.
 *
 * @generated from service payments.v1.PaymentService
 */
export const PaymentService: GenService<{
  /**
   * Deposit processes a deposit request.
   *
   * This method expects a POST request with the user's ID and the amount to be deposited.
   *
   * Request:
   *   - `user_id`: The ID of the user making the deposit.
   *   - `amount`: The amount to be deposited.
   *
   * Response:
   *   - `transaction_id`: The ID of the transaction.
   *   - `status`: The status of the deposit (e.g., "success", "failure").
   *   - `message`: Additional information about the transaction.
   *
   * Possible HTTP responses:
   *   - 200: The deposit was successfully processed.
   *   - 400: The request was malformed, usually due to missing or invalid parameters.
   *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
   *   - 500: Internal server error, indicating a problem on the server side.
   *
   * @generated from rpc payments.v1.PaymentService.Deposit
   */
  deposit: {
    methodKind: "unary";
    input: typeof DepositRequestSchema;
    output: typeof DepositResponseSchema;
  },
  /**
   * Withdraw processes a withdrawal request.
   *
   * This method expects a POST request with the user's ID and the amount to be withdrawn.
   *
   * Request:
   *   - `user_id`: The ID of the user making the withdrawal.
   *   - `amount`: The amount to be withdrawn.
   *
   * Response:
   *   - `transaction_id`: The ID of the transaction.
   *   - `status`: The status of the withdrawal (e.g., "success", "failure").
   *   - `message`: Additional information about the transaction.
   *
   * Possible HTTP responses:
   *   - 200: The withdrawal was successfully processed.
   *   - 400: The request was malformed, usually due to missing or invalid parameters.
   *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
   *   - 500: Internal server error, indicating a problem on the server side.
   *
   * @generated from rpc payments.v1.PaymentService.Withdraw
   */
  withdraw: {
    methodKind: "unary";
    input: typeof WithdrawRequestSchema;
    output: typeof WithdrawResponseSchema;
  },
  /**
   * GetTransactionHistory retrieves the transaction history for a user.
   *
   * This method expects a GET request with the user's ID as a path parameter.
   *
   * Request:
   *   - `user_id`: The ID of the user whose transaction history is being retrieved.
   *
   * Response (streaming):
   *   - `transaction_id`: The ID of the transaction.
   *   - `user_id`: The ID of the user associated with the transaction.
   *   - `amount`: The amount involved in the transaction.
   *   - `type`: The type of transaction (e.g., "deposit", "withdrawal").
   *   - `status`: The status of the transaction.
   *   - `timestamp`: The timestamp of when the transaction occurred.
   *
   * Possible HTTP responses:
   *   - 200: The transaction history was successfully retrieved.
   *   - 400: The request was malformed, usually due to missing or invalid parameters.
   *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
   *   - 500: Internal server error, indicating a problem on the server side.
   *
   * @generated from rpc payments.v1.PaymentService.GetTransactionHistory
   */
  getTransactionHistory: {
    methodKind: "server_streaming";
    input: typeof TransactionHistoryRequestSchema;
    output: typeof TransactionSchema;
  },
  /**
   * UploadTransactions uploads multiple transactions for processing.
   *
   * This method expects a POST request with a list of transactions to be processed.
   *
   * Request:
   *   - `transactions`: A list of transactions to be uploaded.
   *
   * Response:
   *   - `success_count`: The number of transactions successfully processed.
   *   - `failure_count`: The number of transactions that failed to process.
   *   - `errors`: A list of error messages for the failed transactions.
   *
   * Possible HTTP responses:
   *   - 200: The transactions were successfully uploaded.
   *   - 400: The request was malformed, usually due to missing or invalid parameters.
   *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
   *   - 500: Internal server error, indicating a problem on the server side.
   *
   * @generated from rpc payments.v1.PaymentService.UploadTransactions
   */
  uploadTransactions: {
    methodKind: "client_streaming";
    input: typeof UploadTransactionsRequestSchema;
    output: typeof UploadTransactionsResponseSchema;
  },
  /**
   * RealTimeTransaction processes transactions in real-time.
   *
   * This method expects a bidirectional stream of transactions to be processed in real-time.
   *
   * Request/Response (streaming):
   *   - `transaction_id`: The ID of the transaction.
   *   - `user_id`: The ID of the user associated with the transaction.
   *   - `amount`: The amount involved in the transaction.
   *   - `type`: The type of transaction (e.g., "deposit", "withdrawal").
   *   - `status`: The status of the transaction.
   *   - `timestamp`: The timestamp of when the transaction occurred.
   *
   * Possible HTTP responses:
   *   - 200: The transactions were successfully processed.
   *   - 400: The request was malformed, usually due to missing or invalid parameters.
   *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
   *   - 500: Internal server error, indicating a problem on the server side.
   *
   * @generated from rpc payments.v1.PaymentService.RealTimeTransaction
   */
  realTimeTransaction: {
    methodKind: "bidi_streaming";
    input: typeof TransactionSchema;
    output: typeof TransactionSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_payments_v1_payments, 0);

