// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file payments/v1/payments.proto (package payments.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DepositRequest, DepositResponse, Transaction, TransactionHistoryRequest, UploadTransactionsRequest, UploadTransactionsResponse, WithdrawRequest, WithdrawResponse } from "./payments_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * PaymentService provides a set of APIs for processing payments and transactions.
 *
 * @generated from service payments.v1.PaymentService
 */
export const PaymentService = {
  typeName: "payments.v1.PaymentService",
  methods: {
    /**
     * Deposit processes a deposit request.
     *
     * This method expects a POST request with the user's ID and the amount to be deposited.
     *
     * Request:
     *   - `user_id`: The ID of the user making the deposit.
     *   - `amount`: The amount to be deposited.
     *
     * Response:
     *   - `transaction_id`: The ID of the transaction.
     *   - `status`: The status of the deposit (e.g., "success", "failure").
     *   - `message`: Additional information about the transaction.
     *
     * Possible HTTP responses:
     *   - 200: The deposit was successfully processed.
     *   - 400: The request was malformed, usually due to missing or invalid parameters.
     *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
     *   - 500: Internal server error, indicating a problem on the server side.
     *
     * @generated from rpc payments.v1.PaymentService.Deposit
     */
    deposit: {
      name: "Deposit",
      I: DepositRequest,
      O: DepositResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Withdraw processes a withdrawal request.
     *
     * This method expects a POST request with the user's ID and the amount to be withdrawn.
     *
     * Request:
     *   - `user_id`: The ID of the user making the withdrawal.
     *   - `amount`: The amount to be withdrawn.
     *
     * Response:
     *   - `transaction_id`: The ID of the transaction.
     *   - `status`: The status of the withdrawal (e.g., "success", "failure").
     *   - `message`: Additional information about the transaction.
     *
     * Possible HTTP responses:
     *   - 200: The withdrawal was successfully processed.
     *   - 400: The request was malformed, usually due to missing or invalid parameters.
     *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
     *   - 500: Internal server error, indicating a problem on the server side.
     *
     * @generated from rpc payments.v1.PaymentService.Withdraw
     */
    withdraw: {
      name: "Withdraw",
      I: WithdrawRequest,
      O: WithdrawResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetTransactionHistory retrieves the transaction history for a user.
     *
     * This method expects a GET request with the user's ID as a path parameter.
     *
     * Request:
     *   - `user_id`: The ID of the user whose transaction history is being retrieved.
     *
     * Response (streaming):
     *   - `transaction_id`: The ID of the transaction.
     *   - `user_id`: The ID of the user associated with the transaction.
     *   - `amount`: The amount involved in the transaction.
     *   - `type`: The type of transaction (e.g., "deposit", "withdrawal").
     *   - `status`: The status of the transaction.
     *   - `timestamp`: The timestamp of when the transaction occurred.
     *
     * Possible HTTP responses:
     *   - 200: The transaction history was successfully retrieved.
     *   - 400: The request was malformed, usually due to missing or invalid parameters.
     *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
     *   - 500: Internal server error, indicating a problem on the server side.
     *
     * @generated from rpc payments.v1.PaymentService.GetTransactionHistory
     */
    getTransactionHistory: {
      name: "GetTransactionHistory",
      I: TransactionHistoryRequest,
      O: Transaction,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * UploadTransactions uploads multiple transactions for processing.
     *
     * This method expects a POST request with a list of transactions to be processed.
     *
     * Request:
     *   - `transactions`: A list of transactions to be uploaded.
     *
     * Response:
     *   - `success_count`: The number of transactions successfully processed.
     *   - `failure_count`: The number of transactions that failed to process.
     *   - `errors`: A list of error messages for the failed transactions.
     *
     * Possible HTTP responses:
     *   - 200: The transactions were successfully uploaded.
     *   - 400: The request was malformed, usually due to missing or invalid parameters.
     *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
     *   - 500: Internal server error, indicating a problem on the server side.
     *
     * @generated from rpc payments.v1.PaymentService.UploadTransactions
     */
    uploadTransactions: {
      name: "UploadTransactions",
      I: UploadTransactionsRequest,
      O: UploadTransactionsResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * RealTimeTransaction processes transactions in real-time.
     *
     * This method expects a bidirectional stream of transactions to be processed in real-time.
     *
     * Request/Response (streaming):
     *   - `transaction_id`: The ID of the transaction.
     *   - `user_id`: The ID of the user associated with the transaction.
     *   - `amount`: The amount involved in the transaction.
     *   - `type`: The type of transaction (e.g., "deposit", "withdrawal").
     *   - `status`: The status of the transaction.
     *   - `timestamp`: The timestamp of when the transaction occurred.
     *
     * Possible HTTP responses:
     *   - 200: The transactions were successfully processed.
     *   - 400: The request was malformed, usually due to missing or invalid parameters.
     *   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
     *   - 500: Internal server error, indicating a problem on the server side.
     *
     * @generated from rpc payments.v1.PaymentService.RealTimeTransaction
     */
    realTimeTransaction: {
      name: "RealTimeTransaction",
      I: Transaction,
      O: Transaction,
      kind: MethodKind.BiDiStreaming,
    },
  }
} as const;

