syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";

option go_package = "github.com/javiertelioz/grpc-templates/helloworld";

// GreeterService provides a simple greeting API.
service GreeterService {
  // SayHello sends a greeting message to the user.
  //
  // This method expects a GET request with the user's name as a path parameter.
  // The server will respond with a greeting message.
  //
  // Request:
  //   - `name`: The name of the person to greet. This should be passed as a path parameter.
  //
  // Response:
  //   - `message`: A greeting message that includes the user's name.
  //
  // Possible HTTP responses:
  //   - 200: The request was successful, and a greeting message is returned.
  //   - 400: The request was malformed, usually because the 'name' parameter is missing.
  //   - 401: Unauthorized request, typically due to missing or invalid authentication credentials.
  //   - 500: Internal server error, indicating a problem on the server side.
  //
  // Example:
  //   GET /v1/helloworld/John
  //
  // Response:
  //   {
  //     "message": "Hello, John!"
  //   }
  rpc SayHello(GreeterServiceSayHelloRequest) returns (GreeterServiceSayHelloResponse) {
    option (google.api.http) = {
      get: "/v1/helloworld/{name}"
    };
  }
}

// GreeterServiceSayHelloRequest represents the input for the SayHello method.
//
// Fields:
//   - `name`: The name of the person to greet. This should be passed as a path parameter.
message GreeterServiceSayHelloRequest {
  // The name of the person to greet. This should be passed as a path parameter.
  string name = 1;
}

// GreeterServiceSayHelloResponse represents the output from the SayHello method.
//
// Fields:
//   - `message`: A greeting message that includes the user's name.
message GreeterServiceSayHelloResponse {
  // The greeting message to be returned to the user.
  string message = 1;
}
